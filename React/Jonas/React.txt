-- This  Course contains 31 section.

< --- Start Section 1 --- >
-- Cours Roadmap and Projects
  -- Cours Roadmap and Projects

-- Building Our First React App
  -- Building Our First React App

-- Watch Before Start
  -- Watch Before Start

-- Read Before Start
  -- Read Before Start

-- Download Course Matrial
  -- Download Course Matrial
  
< --- End Section 1 --- >




< --- Start Section 2 --- >

-- Intro to Part 1
  -- Intro to Part 1
  
-- Useful Resourses for Part 1
  -- Useful Resourses for Part 1

< --- End Section 2 --- >




< --- Start Section 3 --- >

-- Section Overview
    -- Why React ?
    -- What is React ?
    -- React vs Vanilla JS
    -- Setup new React apps
  
-- Why Do Front-End Frameworks Exist ?
    --  SSR ( Server Side Rendering )  - CSR ( Client Side Rendering )
    
-- React vs Vanilla JS
    -- The Main Diffrence is in the sync
    -- In Vanilla JS we make everything manually
    -- In React everything is dynamic 
    -- In React we don't need to give the element that we will working on it any class 
  
-- What is React ?
  -- React is a JS librrary for building user interfaces
  -- React is ( Declarative - Component-Based - State-Driven )
  -- Created By Facebook

-- Setting Up our development
  -- VS
  -- Node.js
  -- NPM
  
  
-- Pure React
  -- Steps to create a Pure React Project
    -- Create a HTML file
  
    -- Put in the end of the body the CDN's of React
      -- <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
      -- <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  
    -- In the body of the HTML create an element and give it an ID called root
  
    -- Open a script element in the body and make the type of it "text/babel"
  
    -- inside the script tag we will write our logic
  
    -- at the end of it we will initalize an variable called root 
  
    -- root content 'const root = ReactDOM.createRoot(document.getElementById('root'));'
  
    -- root.render(<Componenet/>)

-- A Quick Look at React's Official Documentation
  -- A Quick Look at React's Official Documentation
  
-- Setting Up a New React Project: The Options
  
  -- There is 2 ways to create react app ( create-react-app - vite )
  
  -- The Diffrence between them
  
    -- Create-React-App
      -- Complete Starter Kit for react applications
      -- Everything is already configured ( ESLint - Prettier - Jest - Babel )
      -- Uses slow and outdated techno;ogies ( WebPack )
  
    -- Vite
      -- Modern Build Tool that contains a template for setting up react applications
      -- Need to manually set up ESLint
      -- Extremely fast (HMR) Hot Module Replacement
  
  -- React Frameworks
    -- Next
    -- Remix



-- Setting Up a Project With Create-React-App
  -- Open CMD
  -- Choose the folder that you want to create your project there
  -- npx create-react-app "app-name".
  -- cd app-name
  -- code.
  -- npm start
  
< --- End Section 3 --- >





< --- Start Section 4 --- >
--  Section Overview
  -- Section Overview
 
-- Destructuring Objects and Arrays
  -- const { title , bookName } = book;
  -- const [ first , second ] = array; // array[0] , array[1];

-- Rest/Spread Operator
  -- The Rest/Seperead allows you to expand an iterable (like an array or a string) into individual elements. 
  -- ...arrayName

-- Template Literals
  -- console.log(`${}`)

-- Ternaries Instead of if/else Statements
  -- Ternary Syntax 
    -- ( Condition ) ? " if true " : " if false "
    
-- Arrow Function 
  -- Arrow Function Syntax
    -- const func = (num) => return num;

-- Short-Circuiting And Logical Operators: &&, ||, ??
  -- && for and
  -- || for or
  -- ??  checks for null or undefined, not just falsy values.
  -- ! not
  
-- Optional Chaining
  -- Optional Chaining returns undefined insted of error
    -- EX
       const array = [1,2,3];
       const firstNum = array[0]?.toFixed();   
       // if the first number is  empty or undefined the result will be undefined

-- Array Map
  -- Map Syntax
    -- array.map( (el) ) => el * 2);
    -- Array Map method returns an array 

-- Array Filter
  -- Filter Syntax
    -- array.filter( (el) => (condition) )
    
-- Array Reduce
  -- Reduce Syntax
    -- array.reduce( ( acc ,  el ) => acc + el.pagesNum , starting value )
    -- Reduce returns just one value
    -- The acc is the place that we storing the number of the pages inside.
    
 -- Array Sort
   -- array.sort( (a,b) => a - b )
   -- if we using the sort method , it effects on the original array and the origenal array will be the same result of the sorting array
   -- if we want to avoid this probel we using slice method on the orignal array. // orignal.slice().sort( ( a,b ) => a - b )

-- Working With Immutable Arrays
  -- Working with immutable arrays in JavaScript involves creating new arrays instead of modifying existing ones.
  -- EX
  --------
    	// Using concat()
	const originalArray = [1, 2, 3];
	const newArray = originalArray.concat(4);

	// Using the spread operator
	const newArray2 = [...originalArray, 4];
	
	// Using Slice
	const originalArray = [1, 2, 3, 4, 5];
	const newArray = originalArray.slice(0, 3); // Creates [1, 2, 3]
	
	// Using Filter
	const originalArray = [1, 2, 3];
	const newArray = originalArray.map((item) => item * 2); // Creates [2, 4, 6]


-- Asynchronous JavaScript: Promises
  -- Promise Kinds 
    -- Pendding
    -- Rejected
    -- Fulfilled
   
  -- Fetch returns a promise
  -- Fetch Syntax
   fetch(" API URL ")
    .then( res => res.json() )
    .then( data => console.log(data) )
    
 -- Asynchronous JavaScript: Async - Await
   -- The Async Await is more cleaner and origanizer more than the than method 
   -- The Same function in the async await
     -- async function getPosts(){
       	const res = await fetch(" API URL ")
       	const data = await res.json();
       	console.log(data)
      }
      getPosts();
< --- End Section 4 --- >




< --- Start Section 5 --- >
  -- Section Overview
    -- We have a new 4 terms
      -- Component
      -- Props
      -- JSX
      -- State
   
  -- Rendering the Root Component and Strict Mode
    -- Create a react project using create-react-app
    -- React Strict Mode renders doms twice to find bugs
< --- End Section 5 --- >

















