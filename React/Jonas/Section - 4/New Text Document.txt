< --- Start Section 4 --- >
--  Section Overview
  -- Section Overview
 
-- Destructuring Objects and Arrays
  -- const { title , bookName } = book;
  -- const [ first , second ] = array; // array[0] , array[1];

-- Rest/Spread Operator
  -- The Rest/Seperead allows you to expand an iterable (like an array or a string) into individual elements. 
  -- ...arrayName

-- Template Literals
  -- console.log(`${}`)

-- Ternaries Instead of if/else Statements
  -- Ternary Syntax 
    -- ( Condition ) ? " if true " : " if false "
    
-- Arrow Function 
  -- Arrow Function Syntax
    -- const func = (num) => return num;

-- Short-Circuiting And Logical Operators: &&, ||, ??
  -- && for and
  -- || for or
  -- ??  checks for null or undefined, not just falsy values.
  -- ! not
  
-- Optional Chaining
  -- Optional Chaining returns undefined insted of error
    -- EX
       const array = [1,2,3];
       const firstNum = array[0]?.toFixed();   
       // if the first number is  empty or undefined the result will be undefined

-- Array Map
  -- Map Syntax
    -- array.map( (el) ) => el * 2);
    -- Array Map method returns an array 

-- Array Filter
  -- Filter Syntax
    -- array.filter( (el) => (condition) )
    
-- Array Reduce
  -- Reduce Syntax
    -- array.reduce( ( acc ,  el ) => acc + el.pagesNum , starting value )
    -- Reduce returns just one value
    -- The acc is the place that we storing the number of the pages inside.
    
 -- Array Sort
   -- array.sort( (a,b) => a - b )
   -- if we using the sort method , it effects on the original array and the origenal array will be the same result of the sorting array
   -- if we want to avoid this probel we using slice method on the orignal array. // orignal.slice().sort( ( a,b ) => a - b )

-- Working With Immutable Arrays
  -- Working with immutable arrays in JavaScript involves creating new arrays instead of modifying existing ones.
  -- EX
  --------
    	// Using concat()
	const originalArray = [1, 2, 3];
	const newArray = originalArray.concat(4);

	// Using the spread operator
	const newArray2 = [...originalArray, 4];
	
	// Using Slice
	const originalArray = [1, 2, 3, 4, 5];
	const newArray = originalArray.slice(0, 3); // Creates [1, 2, 3]
	
	// Using Filter
	const originalArray = [1, 2, 3];
	const newArray = originalArray.map((item) => item * 2); // Creates [2, 4, 6]


-- Asynchronous JavaScript: Promises
  -- Promise Kinds 
    -- Pendding
    -- Rejected
    -- Fulfilled
   
  -- Fetch returns a promise
  -- Fetch Syntax
   fetch(" API URL ")
    .then( res => res.json() )
    .then( data => console.log(data) )
    
 -- Asynchronous JavaScript: Async - Await
   -- The Async Await is more cleaner and origanizer more than the than method 
   -- The Same function in the async await
     -- async function getPosts(){
       	const res = await fetch(" API URL ")
       	const data = await res.json();
       	console.log(data)
      }
      getPosts();
< --- End Section 4 --- >
